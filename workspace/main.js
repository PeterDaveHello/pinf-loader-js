
var CONNECT = require("connect"),
	FS = require("fs"),
	PATH = require("path"),
	CRYPTO = require("crypto"),
	QUERYSTRING = require("querystring");
	HTTP = require("http"),
	FS = require("fs"),
	ZLIB = require("zlib");
	
const ROOT_PATH = PATH.dirname(__dirname);
const PORT = 8080;


exports.main = function()
{
    var server = CONNECT();

    server.use(CONNECT.router(function(app)
    {
        app.get(/^\/$/, function(req, res)
        {
            res.writeHead(302, {
                "Location": "http://127.0.0.1:" + PORT + "/workspace/www/"
            });
            res.end();
        });
        app.get(/^\/loader.js$/, function(req, res)
        {
            res.setHeader("Content-Type", "text/javascript");
            res.end(getRawSource());
        });
        app.get(/^\/loader.stripped.js$/, function(req, res)
        {
            res.setHeader("Content-Type", "text/plain");
            res.end(getStrippedSource());
        });
        app.get(/^\/loader.min.js/, function(req, res)
        {
            res.setHeader("Content-Type", "text/plain");
            getMinifiedSource(function(source)
            {
                res.end(source);
            });
        });
        app.get(/^\/loader.min.js.gz/, function(req, res)
        {
            res.setHeader("Content-Type", "application/x-javascript");
            res.setHeader("Content-Encoding", "gzip");
            getMinifiedSource(function()
            {
                var raw = FS.createReadStream(ROOT_PATH + "/loader.min.js.gz");
                res.writeHead(200, {
                    "content-encoding": "gzip"
                });
                raw.pipe(res);
            });
        });
        app.get(/^\/.*/, CONNECT.static(ROOT_PATH));
    }));

    server.listen(PORT, "127.0.0.1");

    console.log("Workspace running. Open browser to: http://127.0.0.1:" + PORT + "/");
}

if (require.main === module) {
    exports.main();
}



function getRawSource()
{
	return FS.readFileSync(ROOT_PATH + "/loader.js").toString();
}

function getStrippedSource()
{
	var source = getRawSource();
	
	source = source.split("\n").filter(function(line)
	{
		return !(/\/\*DEBUG\*\//.test(line));
	}).join("\n");

	source = "\n\n// WARNING: DO NOT EDIT THIS FILE! IT IS AUTO-GENERATED FROM ./loader.js BY STRIPPING '/*DEBUG*/' LINES.\n\n\n" + source;

	FS.writeFileSync(ROOT_PATH + "/loader.stripped.js", source);

	return source;
}

function getMinifiedSource(callback)
{
	var source = getStrippedSource(),
		sourceHash = md5Hash(source),
		fileHash = false;
		
	function done()
	{
		callback(FS.readFileSync(ROOT_PATH + "/loader.min.js").toString());		
	}
	
	if (PATH.existsSync(ROOT_PATH + "/workspace/www/loader.stripped.js.md5"))
	{
		fileHash = FS.readFileSync(ROOT_PATH + "/workspace/www/loader.stripped.js.md5").toString();
	}
	
	if (sourceHash != fileHash)
	{
		console.log("Minifying loader.js using Google Closure ...");
		
		compileSource(source, function(compiledSource)
		{
			FS.writeFileSync(ROOT_PATH + "/loader.min.js", compiledSource);
			
			ZLIB.gzip(new Buffer(compiledSource), function(err, result)
			{
				FS.writeFileSync(ROOT_PATH + "/loader.min.js.gz", result.toString("binary"));

				var out = FS.createWriteStream(ROOT_PATH + "/loader.min.js.gz");
				out.on("close", function()
				{
					var readme = FS.readFileSync(ROOT_PATH + "/README.md").toString();
					readme = readme.replace(/\*\*\d* bytes\*\* \*\(minified and zipped\)\*/, "**" + result.length + " bytes** *(minified and zipped)*");
					FS.writeFileSync(ROOT_PATH + "/README.md", readme);

					FS.writeFileSync(ROOT_PATH + "/workspace/www/loader.stripped.js.md5", sourceHash);
					FS.writeFileSync(ROOT_PATH + "/workspace/www/loader.min.js.gz-size", ""+result.length);

					console.log("... OK");

					done();
				});
				out.end(result);
			});
		});
	}
	else
	{
		done();
	}
}

function md5Hash(data)
{
    var shasum = CRYPTO.createHash("md5");
    shasum.update(data);
    return shasum.digest("hex");
}

function compileSource(codestring, callback)
{
	// @credit http://stackoverflow.com/questions/6158933/http-post-request-in-node-js

	var post_data = QUERYSTRING.stringify({
			'compilation_level' : 'SIMPLE_OPTIMIZATIONS',
			'output_format': 'json',
			'output_info': 'compiled_code',
			'js_code' : codestring
		});

	// An object of options to indicate where to post to
	var post_options = {
		host: 'closure-compiler.appspot.com',
		port: '80',
		path: '/compile',
		method: 'POST',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			'Content-Length': post_data.length
		}
	};

	// Set up the request
	var post_req = HTTP.request(post_options, function(res) {
		res.setEncoding('utf8');
		var data = [];
		res.on('data', function(chunk) {
			data.push(chunk);
		});
		res.on('end', function() {
			callback(JSON.parse(data.join("")).compiledCode);
		});
	});

	// post the data
	post_req.write(post_data);
	post_req.end();	
}